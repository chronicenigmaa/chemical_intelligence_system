-- Week 2: Database Schema (public schema, no enums/functions)

-- USERS
CREATE TABLE IF NOT EXISTS users (
    user_id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email          TEXT UNIQUE,
    full_name      TEXT,
    created_at     TIMESTAMPTZ NOT NULL DEFAULT now()
);

-- COMPANIES
CREATE TABLE IF NOT EXISTS companies (
    company_id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name           TEXT NOT NULL,
    location       TEXT,
    industry       TEXT,
    contact_email  TEXT,
    contact_phone  TEXT,
    website        TEXT,
    created_at     TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT companies_name_nonempty CHECK (length(btrim(name)) > 0)
);

-- PRODUCTS
CREATE TABLE IF NOT EXISTS products (
    product_id         BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name               TEXT NOT NULL,
    cas_number         TEXT UNIQUE, -- may be NULL
    molecular_formula  TEXT,
    molecular_weight   NUMERIC(12,6),
    description        TEXT,
    created_at         TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT cas_format_valid CHECK (
        cas_number IS NULL OR cas_number ~ '^[0-9]{2,7}-[0-9]{2}-[0-9]$'
    ),
    CONSTRAINT products_name_nonempty CHECK (length(btrim(name)) > 0)
);

-- COMPANY ↔ PRODUCT RELATIONSHIPS
CREATE TABLE IF NOT EXISTS company_product_relationships (
    relationship_id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    company_id        BIGINT NOT NULL REFERENCES companies(company_id) ON DELETE CASCADE,
    product_id        BIGINT NOT NULL REFERENCES products(product_id)  ON DELETE CASCADE,
    relationship_type TEXT NOT NULL,
    created_at        TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT rel_type_chk CHECK (relationship_type IN ('supplier','manufacturer','customer')),
    CONSTRAINT rel_unique UNIQUE (company_id, product_id, relationship_type)
);

-- CHEMICAL PROPERTIES (flexible key-value)
CREATE TABLE IF NOT EXISTS chemical_properties (
    property_id     BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    product_id      BIGINT NOT NULL REFERENCES products(product_id) ON DELETE CASCADE,
    property_name   TEXT NOT NULL,
    property_value  TEXT NOT NULL,
    unit            TEXT,
    source          TEXT,
    measured_at     DATE,
    created_at      TIMESTAMPTZ NOT NULL DEFAULT now(),
    CONSTRAINT prop_name_nonempty CHECK (length(btrim(property_name)) > 0)
);

-- USER INTERACTIONS
CREATE TABLE IF NOT EXISTS user_interactions (
    interaction_id  BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id         BIGINT NOT NULL REFERENCES users(user_id) ON DELETE CASCADE,
    product_id      BIGINT NOT NULL REFERENCES products(product_id) ON DELETE CASCADE,
    action          TEXT NOT NULL,
    occurred_at     TIMESTAMPTZ NOT NULL DEFAULT now(),
    metadata        JSONB,
    CONSTRAINT action_chk CHECK (action IN ('view','search','favorite','download')),
    CONSTRAINT ui_unique_once_per_second UNIQUE (user_id, product_id, action, occurred_at)
);

-- INDEXES
CREATE INDEX IF NOT EXISTS idx_products_name_lower
    ON products (lower(name));
CREATE INDEX IF NOT EXISTS idx_products_cas
    ON products (cas_number);
CREATE INDEX IF NOT EXISTS idx_companies_name_lower
    ON companies (lower(name));
CREATE INDEX IF NOT EXISTS idx_rel_company
    ON company_product_relationships (company_id);
CREATE INDEX IF NOT EXISTS idx_rel_product
    ON company_product_relationships (product_id);
CREATE INDEX IF NOT EXISTS idx_chemprop_product_name
    ON chemical_properties (product_id, property_name);

-- ✅ Unique constraint for (product_id, property_name, COALESCE(source,''))
-- Use a UNIQUE INDEX with an expression (allowed in Postgres).
CREATE UNIQUE INDEX IF NOT EXISTS idx_chemprop_unique_expr
    ON chemical_properties (product_id, property_name, (COALESCE(source, '')));

CREATE INDEX IF NOT EXISTS idx_ui_user_product
    ON user_interactions (user_id, product_id);
CREATE INDEX IF NOT EXISTS idx_ui_time
    ON user_interactions (occurred_at DESC);
CREATE INDEX IF NOT EXISTS idx_ui_action
    ON user_interactions (action);

-- SAMPLE DATA
INSERT INTO companies (name, location, industry, contact_email)
VALUES ('Acme Chemicals', 'San Francisco, CA', 'Chemicals', 'sales@acmechem.com')
ON CONFLICT DO NOTHING;

INSERT INTO products (name, cas_number, molecular_formula, molecular_weight, description)
VALUES
  ('Acetone', '67-64-1', 'C3H6O', 58.08, 'Common solvent'),
  ('Ethanol', '64-17-5', 'C2H6O', 46.07, 'Alcohol, solvent and disinfectant')
ON CONFLICT DO NOTHING;

INSERT INTO company_product_relationships (company_id, product_id, relationship_type)
SELECT c.company_id, p.product_id, 'supplier'
FROM companies c, products p
WHERE c.name = 'Acme Chemicals' AND p.name = 'Acetone'
ON CONFLICT DO NOTHING;

INSERT INTO users (email, full_name)
VALUES ('analyst@californiachemical.com', 'Analyst User')
ON CONFLICT DO NOTHING;

INSERT INTO user_interactions (user_id, product_id, action, metadata)
SELECT u.user_id, p.product_id, 'view', '{"page":"product"}'::jsonb
FROM users u, products p
WHERE u.email = 'analyst@californiachemical.com' AND p.name = 'Acetone'
ON CONFLICT DO NOTHING;

INSERT INTO chemical_properties (product_id, property_name, property_value, unit, source)
SELECT product_id, 'Boiling Point', '56.05', '°C', 'PubChem'
FROM products WHERE name = 'Acetone'
ON CONFLICT DO NOTHING;

-- Handy checks:
-- \dt
-- SELECT * FROM chemical_properties;
-- \d+ chemical_properties
